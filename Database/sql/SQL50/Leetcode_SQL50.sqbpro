<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/git/python/leetcode/Database/sql/SQL50/leetcode_SQL50.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="164"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="601"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:mainEmployees"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="42"/><column index="2" value="45"/><column index="3" value="78"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="EmployeeUNI" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="42"/><column index="2" value="72"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="42"/><column index="2" value="58"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL50_Solutions.sql">-- Q1 1757. Recyclable and Low Fat Products
-- SELECT product_id from Products WHERE low_fats = 'Y' AND recyclable = 'Y'

-- Q2 584. Find Customer Referee
-- SELECT name from Customer WHERE referee_id is NULL or referee_id  != 2

-- Q3 595. Big Countries
-- SELECT name, population, area from World WHERE area &gt;= 3000000 OR population &gt;= 25000000

-- Q4 1148. Article Views I
-- SELECT DISTINCT(author_id) AS id 
-- FROM Views WHERE author_id = viewer_id 
-- ORDER BY id ASC;

-- Q5 1683. Invalid Tweets
-- SELECT tweet_id FROM Tweets WHERE length(content)&gt;15;

-- Q6 1378. Replace Employee ID With The Unique Identifier
-- SELECT eu.unique_id, e.name FROM Employees e LEFT JOIN EmployeeUNI eu ON e.id = eu.id;

-- Q7
-- 

-- Q8
-- 

-- Q6
-- 

-- Q7
-- 

-- Q8
-- 

-- Q6
-- 

-- Q7
-- 

-- Q8
-- 

-- Q6
-- 

-- Q7
-- 

-- Q8
-- 

-- Q6
-- 

-- Q7
-- 

-- Q8
-- 
-- Q6
-- 

-- Q7
-- 

-- Q8
-- 

-- Q6
-- 

-- Q7
-- 

-- Q8
-- 

-- Q6
-- 

-- Q7
-- 

-- Q8
-- 

-- Q6
-- 

-- Q7
-- 

-- Q8
-- 
-- Q6
-- 

-- Q7
-- 

-- Q8
-- 
</sql><sql name="6_1378_Replace Employee ID With The Unique Identifier_Q.sql">-- Table: Employees
-- 
-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | id            | int     |
-- | name          | varchar |
-- +---------------+---------+
-- id is the primary key (column with unique values) for this table.
-- Each row of this table contains the id and the name of an employee in a company.
--  
-- 
-- Table: EmployeeUNI
-- 
-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | id            | int     |
-- | unique_id     | int     |
-- +---------------+---------+
-- (id, unique_id) is the primary key (combination of columns with unique values) for this table.
-- Each row of this table contains the id and the corresponding unique id of an employee in the company.
--  
-- 
-- Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.
-- 
-- Return the result table in any order.
-- 
-- The result format is in the following example.
-- 
--  
-- 
-- Example 1:
-- 
-- Input: 
-- Employees table:
-- +----+----------+
-- | id | name     |
-- +----+----------+
-- | 1  | Alice    |
-- | 7  | Bob      |
-- | 11 | Meir     |
-- | 90 | Winston  |
-- | 3  | Jonathan |
-- +----+----------+
-- EmployeeUNI table:
-- +----+-----------+
-- | id | unique_id |
-- +----+-----------+
-- | 3  | 1         |
-- | 11 | 2         |
-- | 90 | 3         |
-- +----+-----------+
-- Output: 
-- +-----------+----------+
-- | unique_id | name     |
-- +-----------+----------+
-- | null      | Alice    |
-- | null      | Bob      |
-- | 2         | Meir     |
-- | 3         | Winston  |
-- | 1         | Jonathan |
-- +-----------+----------+
-- Explanation: 
-- Alice and Bob do not have a unique ID, We will show null instead.
-- The unique ID of Meir is 2.
-- The unique ID of Winston is 3.
-- The unique ID of Jonathan is 1.
CREATE TABLE Employees (
    id INT,
    name VARCHAR(255)
);
CREATE TABLE EmployeeUNI (
    id INT,
    unique_id INT
);

INSERT INTO Employees (id, name)
VALUES (1, 'Alice'), 
       (7, 'Bob'), 
       (11, 'Meir'),
       (90, 'Winston'),
       (3, 'Jonathan');

INSERT INTO EmployeeUNI (id, unique_id)
VALUES (3, 1), 
       (11, 2), 
       (90, 3);
</sql><current_tab id="1"/></tab_sql></sqlb_project>
